from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from database.models import User, UserPhoto, UserTask
from database.database import get_session
from utils.keyboards import get_profile_keyboard, get_main_menu_keyboard
from services.token_service import get_user_balance
from config import config

async def show_profile(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_photos = session.query(UserPhoto).filter(
            UserPhoto.user_id == user_id
        ).count()
        
        completed_tasks = session.query(UserTask).filter(
            UserTask.user_id == user_id,
            UserTask.is_completed == True
        ).count()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        level = calculate_user_level(user.total_earned_msz)
        status = get_user_status(level)
        
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üè∑Ô∏è **–ò–º—è:** {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî **ID:** {user.telegram_id}
üèÜ **–£—Ä–æ–≤–µ–Ω—å:** {level} ({status})

üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
üìè –†–æ—Å—Ç: {user.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚öñÔ∏è –í–µ—Å: {user.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üëï –ì—Ä—É–¥—å: {user.chest or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üëñ –¢–∞–ª–∏—è: {user.waist or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üëó –ë–µ–¥—Ä–∞: {user.hips or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º

üíé **–¢–æ–∫–µ–Ω—ã MSZ:**
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.msz_balance} MSZ
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned_msz} MSZ

üì∏ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {total_photos}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {user.referral_count_l1}

üîó **TON Wallet:** {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if user.ton_wallet_address else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
        """
        
        await message.answer(
            profile_text,
            reply_markup=get_profile_keyboard(),
            parse_mode="Markdown"
        )

async def edit_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback_query.message.edit_text(
        "‚öôÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_edit_profile_keyboard(),
        parse_mode="Markdown"
    )

async def show_statistics(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback_query.from_user.id
    
    async with get_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
        tasks_stats = session.query(UserTask).filter(
            UserTask.user_id == user_id
        ).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
        photos_stats = session.query(UserPhoto).filter(
            UserPhoto.user_id == user_id
        ).all()
        
        validated_photos = [p for p in photos_stats if p.is_validated]
        avg_score = sum(p.validation_score for p in validated_photos if p.validation_score) / len(validated_photos) if validated_photos else 0
        
        stats_text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üíé **–¢–æ–∫–µ–Ω—ã:**
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.msz_balance} MSZ
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned_msz} MSZ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: {user.total_earned_msz // max(len(tasks_stats), 1)} MSZ

üì∏ **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos_stats)}
‚Ä¢ –ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {len(validated_photos)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {avg_score:.2f}/1.0

üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ L1: {user.referral_count_l1}
‚Ä¢ –õ–∏–º–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {config.MAX_REFERRALS_PER_USER}
‚Ä¢ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã: {config.MAX_REFERRALS_PER_USER - user.referral_count_l1}

üìÖ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}
‚Ä¢ –î–Ω–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: {(datetime.utcnow() - user.created_at).days}
        """
        
        await callback_query.message.edit_text(
            stats_text,
            reply_markup=get_back_to_profile_keyboard(),
            parse_mode="Markdown"
        )

def calculate_user_level(total_earned: int) -> int:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if total_earned < 500:
        return 1
    elif total_earned < 1500:
        return 2
    elif total_earned < 3000:
        return 3
    elif total_earned < 6000:
        return 4
    else:
        return 5

def get_user_status(level: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    statuses = {
        1: "–ù–æ–≤–∏—á–æ–∫",
        2: "–ê–∫—Ç–∏–≤–Ω—ã–π",
        3: "–û–ø—ã—Ç–Ω—ã–π", 
        4: "–≠–∫—Å–ø–µ—Ä—Ç",
        5: "–ú–∞—Å—Ç–µ—Ä"
    }
    return statuses.get(level, "–ù–æ–≤–∏—á–æ–∫")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(show_profile, Text(equals="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    dp.register_callback_query_handler(edit_profile, Text(equals="edit_profile"))
    dp.register_callback_query_handler(show_statistics, Text(equals="show_stats"))
