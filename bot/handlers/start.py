from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select

from database.models import User, UserPhoto
from database.database import get_session
from services.image_service import process_user_photo
from services.token_service import add_tokens_to_user
from utils.keyboards import get_main_menu_keyboard, get_gender_keyboard
from utils.validators import validate_height, validate_weight
from config import config

router = Router()

class OnboardingStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_chest = State()
    waiting_for_waist = State()
    waiting_for_hips = State()
    waiting_for_foot_size = State()
    waiting_for_head_circumference = State()
    waiting_for_bra_size = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                onboarding_step="photo"
            )
            session.add(user)
            await session.commit()
        
        if user.is_completed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            await message.answer(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!\n\n"
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.msz_balance} MSZ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
            return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Å—Ç–µ—Ä-—Ä–∞–∑–º–µ—Ä!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚ú® –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π 3D-–∞–≤–∞—Ç–∞—Ä
üéØ –¢–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã  
üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã MSZ
üöÄ –°—Ç–∞—Ç—å —Å–æ—Ä–∞—Ç–Ω–∏–∫–æ–º —Ä–µ–≤–æ–ª—é—Ü–∏–∏ –≤ fashion e-commerce

**–®–∞–≥ 1/8: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ**

üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±–ª–µ–≥–∞—é—â–µ–π –æ–¥–µ–∂–¥–µ (—Å–ø–µ—Ä–µ–¥–∏):

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –†–æ–≤–Ω–∞—è –ø–æ–∑–∞
‚Ä¢ –í–∏–¥–Ω–æ –≤—Å—é —Ñ–∏–≥—É—Ä—É
‚Ä¢ –û–±–ª–µ–≥–∞—é—â–∞—è –æ–¥–µ–∂–¥–∞

*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D-–∞–≤–∞—Ç–∞—Ä–∞*
    """
    
    await message.answer(welcome_text)
    await state.set_state(OnboardingStates.waiting_for_photo)

@router.message(OnboardingStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        validation_result = await process_user_photo(photo, user_id)
        
        if not validation_result["is_valid"]:
            await message.answer(
                f"‚ùå **–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {validation_result['reason']}\n\n"
                f"üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º."
            )
            return
            
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É
    async with get_session() as session:
        user_photo = UserPhoto(
            user_id=user_id,
            file_id=photo.file_id,
            photo_type="front",
            is_validated=True,
            validation_score=validation_result["score"]
        )
        session.add(user_photo)
        await session.commit()
    
    await message.answer(
        "‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ.**\n\n"
        "üìä **–®–∞–≥ 2/8: –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª**",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(OnboardingStates.waiting_for_gender)

@router.callback_query(OnboardingStates.waiting_for_gender, F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split("_")[1]  # gender_male/gender_female
    user_id = callback.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.gender = gender
            user.onboarding_step = "age"
            await session.commit()
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
        f"üìä **–®–∞–≥ 3/8: –í–æ–∑—Ä–∞—Å—Ç**\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80):"
    )
    await state.set_state(OnboardingStates.waiting_for_age)
    await callback.answer()

@router.message(OnboardingStates.waiting_for_age, F.text)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text)
        if not (16 <= age <= 80):
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80)")
        return
    
    user_id = message.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.age = age
            user.onboarding_step = "height"
            await session.commit()
    
    await message.answer(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"üìä **–®–∞–≥ 4/8: –†–æ—Å—Ç**\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):"
    )
    await state.set_state(OnboardingStates.waiting_for_height)

@router.message(OnboardingStates.waiting_for_height, F.text)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    height = validate_height(message.text)
    if not height:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º (–æ—Ç 140 –¥–æ 220)")
        return
    
    user_id = message.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.height = height
            user.onboarding_step = "weight"
            await session.commit()
    
    await message.answer(
        f"‚úÖ –†–æ—Å—Ç: {height} —Å–º\n\n"
        f"üìä **–®–∞–≥ 5/8: –í–µ—Å**\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):"
    )
    await state.set_state(OnboardingStates.waiting_for_weight)

@router.message(OnboardingStates.waiting_for_weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    weight = validate_weight(message.text)
    if not weight:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (–æ—Ç 40 –¥–æ 200)")
        return
    
    user_id = message.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.weight = weight
            user.onboarding_step = "chest"
            await session.commit()
    
    await message.answer(
        f"‚úÖ –í–µ—Å: {weight} –∫–≥\n\n"
        f"üìä **–®–∞–≥ 6/8: –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏**\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90):"
    )
    await state.set_state(OnboardingStates.waiting_for_chest)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏...

@router.message(OnboardingStates.waiting_for_chest, F.text)
async def complete_onboarding(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ –≤—ã–¥–∞—á–∞ –±–∞–∑–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.is_completed = True
            user.onboarding_step = "completed"
            await session.commit()
    
    # –í—ã–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
    base_reward = config.BASE_REWARD_MSZ
    await add_tokens_to_user(user_id, base_reward, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")
    
    completion_text = f"""
üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!**

‚úÖ –í–∞—à 3D-–∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω
üíé –ü–æ–ª—É—á–µ–Ω–æ {base_reward} MSZ —Ç–æ–∫–µ–Ω–æ–≤

üöÄ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ MSZ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞)  
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON Wallet

üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üí∞ –ë–∞–ª–∞–Ω—Å: {base_reward} MSZ
üéØ –£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫
‚≠ê –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
    """
    
    await message.answer(
        completion_text,
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
