from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from database.models import User
from database.database import get_session
from services.ton_service import validate_ton_address, get_wallet_balance
from utils.keyboards import get_wallet_keyboard, get_tonconnect_keyboard
from config import config

class WalletStates(StatesGroup):
    waiting_for_address = State()

async def show_wallet_info(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if user.ton_wallet_address:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            wallet_balance = await get_wallet_balance(user.ton_wallet_address)
            
            wallet_text = f"""
üíé **–í–∞—à TON Wallet**

üìç **–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:**
`{user.ton_wallet_address}`

üí∞ **–ë–∞–ª–∞–Ω—Å:**
‚Ä¢ TON: {wallet_balance.get('ton', 0):.4f}
‚Ä¢ MSZ: {user.msz_balance}

üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ MSZ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
TON Wallet –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ 3D ShopLine.
            """
        else:
            wallet_text = f"""
üíé **TON Wallet –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω**

üöÄ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–æ–∫–µ–Ω–∞–º–∏ MSZ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ IDO –∏ NFT-–¥—Ä–æ–ø–∞—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–º (DAO)

üì± **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:**
‚Ä¢ Tonkeeper
‚Ä¢ MyTonWallet
‚Ä¢ Tonhub
‚Ä¢ TON Wallet

üéÅ **–ë–æ–Ω—É—Å:** {config.BASE_REWARD_MSZ // 2} MSZ –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞!
            """
        
        await message.answer(
            wallet_text,
            reply_markup=get_wallet_keyboard(user.ton_wallet_address is not None),
            parse_mode="Markdown"
        )

async def connect_wallet_tonconnect(callback_query: types.CallbackQuery):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TonConnect"""
    await callback_query.message.edit_text(
        "üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON Wallet**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=get_tonconnect_keyboard(),
        parse_mode="Markdown"
    )

async def connect_wallet_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
    await callback_query.message.edit_text(
        "üìù **–†—É—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞.\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. "
        "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Ç–æ–∫–µ–Ω–æ–≤.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t`",
        parse_mode="Markdown"
    )
    await WalletStates.waiting_for_address.set()

async def process_wallet_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    wallet_address = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if not validate_ton_address(wallet_address):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.\n"
            "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'EQ' –∏–ª–∏ 'UQ' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 48 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    async with get_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.ton_wallet_address = wallet_address
        session.commit()
    
    # –í—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    bonus_amount = config.BASE_REWARD_MSZ // 2
    await add_tokens_to_user(user_id, bonus_amount, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON Wallet")
    
    await message.answer(
        f"‚úÖ **–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
        f"üìç –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
        f"üéÅ –ë–æ–Ω—É—Å: {bonus_amount} MSZ\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ MSZ!",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.finish()

async def disconnect_wallet(callback_query: types.CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
    user_id = callback_query.from_user.id
    
    async with get_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.ton_wallet_address = None
        session.commit()
    
    await callback_query.message.edit_text(
        "‚úÖ **–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_wallet_keyboard(False)
    )

async def show_transactions(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user_id = callback_query.from_user.id
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    await callback_query.message.edit_text(
        "üìä **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π**\n\n"
        "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n\n"
        "–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è MSZ —Ç–æ–∫–µ–Ω–æ–≤\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ IDO –∏ NFT-–ø–æ–∫—É–ø–∫–∞—Ö\n"
        "‚Ä¢ –°—Ç–µ–π–∫–∏–Ω–≥ –∏ rewards",
        reply_markup=get_wallet_keyboard(True),
        parse_mode="Markdown"
    )

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(show_wallet_info, Text(equals="üíé TON Wallet"))
    dp.register_callback_query_handler(connect_wallet_tonconnect, Text(equals="connect_tonconnect"))
    dp.register_callback_query_handler(connect_wallet_manual, Text(equals="connect_manual"))
    dp.register_callback_query_handler(disconnect_wallet, Text(equals="disconnect_wallet"))
    dp.register_callback_query_handler(show_transactions, Text(equals="show_transactions"))
    dp.register_message_handler(process_wallet_address, state=WalletStates.waiting_for_address)
